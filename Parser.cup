import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamWriter;
import java.io.*;


parser code {:

	OutputWriter out;
	BinaryGenerator bin;
	String actualLine;
	 
	public Parser(Lexer lex, ComplexSymbolFactory sf, String filename, BinaryGenerator bg) {
		super(lex,sf);
		actualLine = "";
		out = new OutputWriter(filename);
		bin = bg;

	}
:}

non terminal expression,instruction, parameters, declaration, program, parameter;
terminal separator, operation,immediate, segment, label, string, types, variable, register, tag;

program ::= program expression {: :}
	| expression 
	;

expression  ::= instruction 
	| declaration 
	| segment:seg {: if(((String)seg).equals(".code")){out.writeLine(bin.getPadding());} :}
	;


instruction ::= operation: op parameters {: out.writeLine(bin.getOperationBinary((String)op) + " " + actualLine); actualLine=""; :}
	| operation: op {: out.writeLine(bin.getOperationBinary((String)op)); :}
	;

parameters  ::= parameter 
	| parameter:param separator:sep parameters:params
	;

parameter   ::= immediate :imm {: actualLine += (bin.convertIntToBinary(Integer.parseInt((String)imm),16) + " "); :}
	| register:reg {: actualLine += bin.getRegisterBinary((String)reg) + " "; :}
	| tag:t {: actualLine +=bin.getVariableOffset((String)t) + " "; :}
	;

declaration ::= label:l {: System.out.println("Label detectado por cup: " + l);:}
	| variable:var types:typ string:str {:out.writeLine(bin.convertStringToBinary((String)str, (String)var));:}
	| variable:var types:typ immediate:imm {:out.writeLine(bin.ConvertWordToBinary((Integer.parseInt((String)imm)), (String)typ, (String)var)) ;:}
	;



